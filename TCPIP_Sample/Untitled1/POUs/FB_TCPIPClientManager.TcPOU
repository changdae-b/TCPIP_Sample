<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_TCPIPClientManager" Id="{d5c7a1b0-adfa-46d4-ac18-ab174408c713}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TCPIPClientManager

VAR_GENERIC CONSTANT
	STRING_SIZE 		: UDINT := 255;
END_VAR

VAR
	_Initalized : BOOL;
	fbClientConnection 			: FB_ClientServerConnection;
	fbSocketCloseAll			: FB_SocketCloseAll;
	fbSocketSend				: FB_SocketSend;
	fbSocketReceive				: FB_SocketReceive;
	eState 						: E_TcpIpState;
	
	_sSrvNetID 					: T_AmsNetID  := ''; 
// 	_RemoteHost 				: T_IPv4Addr := '192.168.10.160';
// 	_RemotePort 				: UDINT := 5000;
	_SendString					: REFERENCE TO STRING(STRING_SIZE);
	_ReceiveString				: REFERENCE TO STRING(STRING_SIZE);
	_SendDone 					: BOOL;
	_ReceiveDone 				: BOOL;
	
	_ErrorID 				: E_TcpIpErrorID;
	
	RTrig_SendData			: R_TRIG;
	RTrig_ReceiveData		: R_TRIG;
	NumberOfSentData 		: UDINT;
	NumberOfReceivedData 	: UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Property" Id="{09bdd88d-1f95-45a0-aca5-5aab66a921f9}" />
    <Action Name="CyclicCall" Id="{b410e726-1843-4034-8942-e356b689bd4a}">
      <Implementation>
        <ST><![CDATA[IF NOT _Initalized THEN
	fbSocketCloseAll(sSrvNetId:= _sSrvNetID, bExecute:= NOT _Initalized);
	IF fbSocketCloseAll.bBusy THEN
		RETURN;
	ELSE
		fbSocketCloseAll(sSrvNetId:= _sSrvNetID, bExecute:= FALSE);
		_Initalized := TRUE;
	END_IF
END_IF


fbClientConnection();
IF fbClientConnection.bError THEN
	eState := E_TcpIpState.Error;
END_IF 	


fbSocketSend(sSrvNetId:= _sSrvNetID, hSocket:= fbClientConnection.hSocket, cbLen:= STRING_SIZE, pSrc:= ADR(_SendString));
IF fbSocketSend.bError THEN
	 eState := E_TcpipState.Error;
	 _ErrorID := fbSocketSend.nErrId;
ELSIF NOT fbSocketSend.bBusy THEN
	_SendDone := TRUE;
END_IF

fbSocketReceive(sSrvNetId:= _sSrvNetID, hSocket:= fbClientConnection.hSocket, cbLen:= STRING_SIZE, pDest:= ADR(_ReceiveString));
IF fbSocketReceive.bError THEN
	 eState := E_TcpipState.Error;
	 _ErrorID := fbSocketReceive.nErrId;
ELSIF NOT fbSocketReceive.bBusy THEN
	_ReceiveDone := TRUE;
END_IF




RTrig_ReceiveData(CLK := NOT (fbSocketReceive.bBusy OR fbSocketReceive.bError));
IF RTrig_ReceiveData.Q THEN
	IF NumberOfReceivedData <  4294967290 THEN
		NumberOfReceivedData := NumberOfReceivedData + 1;
	ELSE
		NumberOfReceivedData := 0;
	END_IF	
END_IF

RTrig_SendData(CLK := NOT (fbSocketSend.bBusy OR fbSocketSend.bError));
IF RTrig_SendData.Q THEN
	IF NumberOfSentData <  4294967290 THEN
		NumberOfSentData := NumberOfSentData + 1;
	ELSE
		NumberOfSentData := 0;
	END_IF	
END_IF]]></ST>
      </Implementation>
    </Action>
    <Method Name="Disable" Id="{cfa62de6-e84d-4ccd-bd0d-460cc0c93d46}">
      <Declaration><![CDATA[METHOD Disable
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbClientConnection.bEnable := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{50a647ce-fd6f-47db-9ef2-dc287ed4f9ae}">
      <Declaration><![CDATA[METHOD Enable
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbClientConnection.bEnable := TRUE;
NumberOfSentData 		:= 0;
NumberOfReceivedData 	:= 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ErrorID" Id="{fa8fcae1-aada-4e19-b3ec-20c8e6065c33}" FolderPath="Property\">
      <Declaration><![CDATA[PROPERTY ErrorID : E_TcpIpErrorID]]></Declaration>
      <Get Name="Get" Id="{8e49e711-1937-412c-8171-8f4c35cd93df}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF eState = E_TcpIpState.Error THEN
	ErrorID := _ErrorID;
ELSE
	ErrorID := 0;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_Init" Id="{e8dfc9eb-2560-4cd0-bde6-5873bf992578}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
	RemoteHost 					: T_IPv4Addr := '192.168.10.160';
	RemotePort 					: UDINT := 5000;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbClientConnection.sRemoteHost := RemoteHost;
fbClientConnection.nRemotePort := RemotePort;]]></ST>
      </Implementation>
    </Method>
    <Property Name="isConnected" Id="{138cffb7-7a18-49e8-8f41-74bb1a9efcbd}" FolderPath="Property\">
      <Declaration><![CDATA[PROPERTY isConnected : BOOL]]></Declaration>
      <Get Name="Get" Id="{ffcbba59-bfcf-494b-924a-22a40d3c9140}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isConnected := fbClientConnection.eState = eSocket_Connected;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isError" Id="{1a638e9c-8633-4d0e-a798-b9463942f997}" FolderPath="Property\">
      <Declaration><![CDATA[PROPERTY isError : BOOL]]></Declaration>
      <Get Name="Get" Id="{5ae59354-bc9b-4139-aa3a-6a47e2fffb94}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isError := eState = E_TcpIpState.Error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isReceived" Id="{a0598664-b332-4c5c-bd29-d85ce4f70f67}" FolderPath="Property\">
      <Declaration><![CDATA[PROPERTY isReceived : BOOL]]></Declaration>
      <Get Name="Get" Id="{7ddbbe30-cc64-491e-b5f5-5894c5cddcc0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isReceived := _ReceiveDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isSent" Id="{730b6c58-4dcb-45e9-a9f2-fb7b4bbb1e48}" FolderPath="Property\">
      <Declaration><![CDATA[PROPERTY isSent : BOOL]]></Declaration>
      <Get Name="Get" Id="{dcae58eb-58c0-4b32-a9a9-8137cc8a3c0e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isSent := _SendDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Receive" Id="{4e001c85-1ac3-4026-90bd-e52d78ef7177}">
      <Declaration><![CDATA[METHOD Receive : BOOL
VAR_IN_OUT
	ReceiveString : STRING(STRING_SIZE);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ReceiveDone := FALSE;
IF NOT fbSocketReceive.bBusy THEN
	_ReceiveString REF= ReceiveString;	
	fbSocketReceive(bExecute:= FALSE);
	fbSocketReceive.bExecute := TRUE;
	eState := E_Tcpipstate.Receive;
	MEMSET(ADR(_ReceiveString),0,SIZEOF(_ReceiveString));
	Receive := TRUE;
ELSE
	Receive := FALSE;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Send" Id="{01ae6eb9-0aa8-4f0a-9d7c-a2f12979086b}">
      <Declaration><![CDATA[METHOD Send : BOOL
VAR_IN_OUT
	SendString : STRING(STRING_SIZE);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_SendDone := FALSE;
IF NOT fbSocketSend.bBusy THEN
	_SendString REF= SendString;	
	fbSocketSend(bExecute:= FALSE);
	fbSocketSend.bExecute := TRUE;
	eState := E_Tcpipstate.Send;
	Send := TRUE;
ELSE
	Send := FALSE;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetReconnectTime" Id="{a112b514-890c-4223-8d8f-f7e525527c44}">
      <Declaration><![CDATA[METHOD SetReconnectTime
VAR_INPUT
	ReconnectTime : TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbClientConnection.tReconnect := ReconnectTime;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>